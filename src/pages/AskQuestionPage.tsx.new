import { useState } from "react";
import { useTranslation } from "react-i18next";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";
import { QuestionService, CreateQuestionData } from "@/lib/questionService";
import { ArrowLeft, Send, User, Mail, Tag, ChevronRight } from "lucide-react";
import { Header } from "@/components/Header";
import Footer from "@/components/Footer";

const questionCategories = [
  "Health & Medical",
  "Legal",
  "Financial",
  "Automotive",
  "Home & Garden",
  "Pets",
  "Technology",
  "Education",
  "Travel",
  "Food & Dining",
  "Other"
];

export const AskQuestionPage = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState<CreateQuestionData>({
    title: "",
    content: "",
    user_name: "",
    user_email: "",
    category: ""
  });

  const handleInputChange = (field: keyof CreateQuestionData, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validation
    if (!formData.title.trim()) {
      toast.error(t('questions.form.titleRequired') || 'Title is required');
      return;
    }
    if (!formData.content.trim()) {
      toast.error(t('questions.form.contentRequired') || 'Content is required');
      return;
    }
    if (!formData.user_name.trim()) {
      toast.error(t('questions.form.nameRequired') || 'Name is required');
      return;
    }
    if (!formData.user_email.trim()) {
      toast.error(t('questions.form.emailRequired') || 'Email is required');
      return;
    }
    if (!formData.category) {
      toast.error(t('questions.form.categoryRequired') || 'Category is required');
      return;
    }

    setIsSubmitting(true);

    try {
      await QuestionService.createQuestion(formData);
      toast.success(t('questions.form.submitted') || 'Question submitted successfully');
      navigate('/');
    } catch (error) {
      console.error('Error submitting question:', error);
      toast.error(t('questions.form.submissionError') || 'Error submitting question');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-yp-gray-light flex flex-col">
      <Header />
      <main className="flex-grow container mx-auto px-4 py-8 md:py-12">
        <div className="max-w-4xl mx-auto">
          <Button
            variant="ghost"
            onClick={() => navigate(-1)}
            className="mb-6 flex items-center gap-2 text-yp-blue hover:bg-yp-blue/10"
          >
            <ArrowLeft className="w-4 h-4" />
            {t('common.back') || 'Back'}
          </Button>
          
          <div className="space-y-6">
            {/* FAQ Section */}
            <div 
              className="bg-white rounded-xl shadow-sm p-6 md:p-8 cursor-pointer hover:shadow-md transition-shadow" 
              onClick={() => navigate('/faq')}
            >
              <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                <div>
                  <h2 className="text-xl md:text-2xl font-bold text-yp-dark">
                    Frequently Asked Questions
                  </h2>
                  <p className="text-yp-gray-dark mt-2">
                    Find quick answers to common questions in our FAQ section
                  </p>
                </div>
                <div className="mt-4 md:mt-0 flex items-center text-yp-blue">
                  <span className="font-medium">View All FAQs</span>
                  <ChevronRight className="w-5 h-5 ml-1" />
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
                <div className="p-4 bg-yp-gray-light/50 rounded-lg hover:bg-yp-gray-light transition-colors">
                  <h3 className="font-medium text-yp-dark">How do I submit a business?</h3>
                  <p className="text-sm text-yp-gray-dark mt-1">Learn how to add your business to our directory.</p>
                </div>
                <div className="p-4 bg-yp-gray-light/50 rounded-lg hover:bg-yp-gray-light transition-colors">
                  <h3 className="font-medium text-yp-dark">What information do I need to provide?</h3>
                  <p className="text-sm text-yp-gray-dark mt-1">Find out what details are required for listings.</p>
                </div>
              </div>
            </div>

            {/* Main Form Section */}
            <div className="bg-white rounded-xl shadow-sm p-6 md:p-8">
              <div className="mb-6">
                <h1 className="text-2xl md:text-3xl font-bold text-yp-dark">
                  Ask BARA
                </h1>
                <p className="text-yp-gray-dark mt-2">
                  Have a question? Our BARA community is here to help!
                </p>
              </div>

              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Question Title */}
                <div>
                  <label htmlFor="title" className="block text-sm font-medium text-yp-dark mb-2">
                    {t('questions.form.titleLabel') || 'Question Title'}
                  </label>
                  <Input
                    id="title"
                    type="text"
                    value={formData.title}
                    onChange={(e) => handleInputChange('title', e.target.value)}
                    placeholder={t('questions.form.titlePlaceholder') || 'Enter your question'}
                    className="w-full"
                    maxLength={100}
                  />
                  <p className="text-xs text-yp-gray-dark mt-1">
                    {formData.title.length}/100 {t('questions.form.characters') || 'characters'}
                  </p>
                </div>

                {/* Question Content */}
                <div>
                  <label htmlFor="content" className="block text-sm font-medium text-yp-dark mb-2">
                    {t('questions.form.contentLabel') || 'Details'}
                  </label>
                  <Textarea
                    id="content"
                    value={formData.content}
                    onChange={(e) => handleInputChange('content', e.target.value)}
                    placeholder={t('questions.form.contentPlaceholder') || 'Provide more details about your question'}
                    className="w-full min-h-[120px]"
                    maxLength={1000}
                  />
                  <p className="text-xs text-yp-gray-dark mt-1">
                    {formData.content.length}/1000 {t('questions.form.characters') || 'characters'}
                  </p>
                </div>

                {/* Category Selection */}
                <div>
                  <label htmlFor="category" className="block text-sm font-medium text-yp-dark mb-2">
                    {t('questions.form.categoryLabel') || 'Category'}
                  </label>
                  <div className="relative">
                    <select
                      id="category"
                      value={formData.category}
                      onChange={(e) => handleInputChange('category', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-yp-blue focus:border-transparent"
                    >
                      <option value="">{t('questions.form.selectCategory') || 'Select a category'}</option>
                      {questionCategories.map((category) => (
                        <option key={category} value={category}>
                          {category}
                        </option>
                      ))}
                    </select>
                    <Tag className="absolute right-3 top-2.5 h-5 w-5 text-yp-gray-dark" />
                  </div>
                </div>

                {/* User Information */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="user_name" className="block text-sm font-medium text-yp-dark mb-2">
                      {t('questions.form.nameLabel') || 'Your Name'}
                    </label>
                    <div className="relative">
                      <Input
                        id="user_name"
                        type="text"
                        value={formData.user_name}
                        onChange={(e) => handleInputChange('user_name', e.target.value)}
                        placeholder={t('questions.form.namePlaceholder') || 'Enter your name'}
                        className="w-full"
                      />
                      <User className="absolute right-3 top-2.5 h-5 w-5 text-yp-gray-dark" />
                    </div>
                  </div>

                  <div>
                    <label htmlFor="user_email" className="block text-sm font-medium text-yp-dark mb-2">
                      {t('questions.form.emailLabel') || 'Your Email'}
                    </label>
                    <div className="relative">
                      <Input
                        id="user_email"
                        type="email"
                        value={formData.user_email}
                        onChange={(e) => handleInputChange('user_email', e.target.value)}
                        placeholder={t('questions.form.emailPlaceholder') || 'Enter your email'}
                        className="w-full"
                      />
                      <Mail className="absolute right-3 top-2.5 h-5 w-5 text-yp-gray-dark" />
                    </div>
                  </div>
                </div>

                {/* Submit Button */}
                <div className="pt-4">
                  <Button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full bg-yp-green hover:bg-yp-green/90 text-white font-roboto font-semibold py-3 px-6 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <div className="flex items-center space-x-2">
                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>{t('questions.form.submitting') || 'Submitting...'}</span>
                      </div>
                    ) : (
                      <div className="flex items-center space-x-2">
                        <Send className="w-4 h-4" />
                        <span>{t('questions.form.submit') || 'Submit Question'}</span>
                      </div>
                    )}
                  </Button>
                </div>
              </form>

              {/* Additional Info */}
              <div className="mt-8 p-4 bg-yp-gray-light rounded-lg">
                <h3 className="font-roboto font-semibold text-yp-dark mb-2">
                  {t('questions.page.infoTitle') || 'Need Help?'}
                </h3>
                <p className="text-sm text-yp-gray-dark">
                  {t('questions.page.infoText') || 'Our team is here to help you with any questions you may have.'}
                </p>
              </div>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default AskQuestionPage;
